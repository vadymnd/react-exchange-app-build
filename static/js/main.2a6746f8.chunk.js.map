{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["getAllCurrencyRates","a","fetch","baseCurrencyRates","json","dataBaseCurrencyRates","rates","EUR","getAllCurrency","baseCurrency","dataBaseCurrency","App","useState","baseAllCurrency","setAllCurrency","firstInputValue","setFirstInputValue","secondInputValue","setSecondInputValue","firstSelectValue","setFirstSelectValue","secondSelectValue","setSecondSelectValue","setRates","useEffect","then","res","catch","handleFocus","e","target","select","handleCopy","currentTarget","parentElement","querySelector","document","execCommand","date","Date","id","className","Math","floor","getHours","getMinutes","minutes","value","onFocus","onChange","type","onClick","xmlns","viewBox","d","Object","keys","sort","x","y","map","item","key","indexOf","focusable","href","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a6746f8.chunk.js","sourcesContent":["export const getAllCurrencyRates = async () => {\r\n  const baseCurrencyRates = await fetch('https://api.exchangeratesapi.io/latest');\r\n\r\n  const dataBaseCurrencyRates = await baseCurrencyRates.json();\r\n  \r\n  dataBaseCurrencyRates.rates.EUR = 1;\r\n  \r\n  return dataBaseCurrencyRates.rates;\r\n}\r\n\r\nexport const getAllCurrency = async () => {\r\n  const baseCurrency = await fetch('https://api.exchangeratesapi.io/latest');\r\n\r\n  const dataBaseCurrency = await baseCurrency.json();\r\n\r\n  return dataBaseCurrency;\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './reset.css';\nimport { getAllCurrency, getAllCurrencyRates } from './api.js';\n\nfunction App() {\n  const [baseAllCurrency, setAllCurrency] = useState(null);\n  const [firstInputValue, setFirstInputValue] = useState();\n  const [secondInputValue, setSecondInputValue] = useState();\n  const [firstSelectValue, setFirstSelectValue] = useState('EUR');\n  const [secondSelectValue, setSecondSelectValue] = useState('USD');\n  const [rates, setRates] = useState('');\n\n  useEffect(() => {\n    getAllCurrency()\n      .then(res => {\n        setAllCurrency(res);\n      })\n      .catch(null);\n    getAllCurrencyRates()\n      .then(res => {\n        setRates(res);\n      })\n      .catch(null);\n  }, []);\n\n  const handleOnChangeFirstSelect = (e) => {\n    setFirstSelectValue(e.target.value);\n    setSecondInputValue((rates[secondSelectValue] / rates[e.target.value]) * firstInputValue)\n  };\n\n  const handleOnChangeSecondSelect = (e) => {\n    setSecondSelectValue(e.target.value);\n    setSecondInputValue((rates[e.target.value] / rates[firstSelectValue]) * firstInputValue)\n  };\n\n  const handleOnChangeFirstInput = (e) => {\n    setFirstInputValue(e.target.value);\n    setSecondInputValue((rates[secondSelectValue] / rates[firstSelectValue]) * e.target.value);\n  };\n\n  const handleOnChangeSecondInput = (e) => {\n    setSecondInputValue(e.target.value);\n    setFirstInputValue(e.target.value / (rates[secondSelectValue] / rates[firstSelectValue]));\n  };\n\n  const handleFocus = (e) => {\n    e.target.select();\n  };\n\n  const handleCopy = (e) => {\n    e.currentTarget.parentElement.querySelector('input').select();\n    document.execCommand(\"copy\");\n  };\n\n  const date = new Date();  \n  \n  const minutes = (date) => (date.getMinutes() < 10 ? '0' : '') + date.getMinutes();\n\n  return <div id=\"main-react-exchange-app\">\n    <div className=\"current\">\n      <div className=\"rate-1\">1 {firstSelectValue} equally</div>\n      <div className=\"rate-2\">{Math.floor((rates[secondSelectValue] / rates[firstSelectValue]) * 100000) / 100000} {secondSelectValue}</div>\n      <div className=\"date\">{baseAllCurrency ? baseAllCurrency.date : ''} {date.getHours() + ':' + minutes(date)}</div> \n    </div>\n    <div className=\"input-metods\">\n      <div className=\"inputs\">\n        <div>\n          <input className=\"first-input\"\n            value={Math.floor(firstInputValue * 100) / 100}\n            onFocus={handleFocus}\n            onChange={handleOnChangeFirstInput}\n            type=\"number\"\n          />\n          <span className=\"copy-btn\" onClick={handleCopy}><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 488.3 488.3\"><path d=\"M314 85H87c-21 0-38 18-38 39v326c0 21 17 38 38 38h227c22 0 39-17 39-38V124c0-21-18-39-39-39zm12 365c0 6-5 11-12 11H87c-6 0-11-5-11-11V124c0-6 5-12 11-12h227c7 0 12 6 12 12v326z\"/><path d=\"M401 0H174c-21 0-39 17-39 39 0 7 6 13 14 13s13-6 13-13 6-12 12-12h227c6 0 12 5 12 12v325c0 7-6 12-12 12-7 0-13 6-13 13s6 14 13 14c21 0 39-17 39-39V39c0-22-18-39-39-39z\"/></svg></span>\n        </div>\n        <div>\n          <input className=\"second-input\"\n            value={Math.floor(secondInputValue * 100) / 100}\n            onFocus={handleFocus}\n            onChange={handleOnChangeSecondInput}\n            type=\"number\"\n          />\n          <span className=\"copy-btn\" onClick={handleCopy}><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 488.3 488.3\"><path d=\"M314 85H87c-21 0-38 18-38 39v326c0 21 17 38 38 38h227c22 0 39-17 39-38V124c0-21-18-39-39-39zm12 365c0 6-5 11-12 11H87c-6 0-11-5-11-11V124c0-6 5-12 11-12h227c7 0 12 6 12 12v326z\"/><path d=\"M401 0H174c-21 0-39 17-39 39 0 7 6 13 14 13s13-6 13-13 6-12 12-12h227c6 0 12 5 12 12v325c0 7-6 12-12 12-7 0-13 6-13 13s6 14 13 14c21 0 39-17 39-39V39c0-22-18-39-39-39z\"/></svg></span>\n        </div>\n      </div>\n      <div className=\"selects\">\n        <div>\n          <select className=\"first-select\" onChange={handleOnChangeFirstSelect}>\n          {Object.keys(rates).sort().sort(function(x,y) {\n            return x === 'EUR' ? -1 : y === 'EUR' ? 1 : 0;\n          }).map(function (item) {\n              return <option key={Object.keys(rates).indexOf(item)}>{item}</option>\n            })}\n          </select>\n          <span className=\"arrow-down\"><svg focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M7 10l5 5 5-5z\"></path></svg></span>\n        </div>\n        <div>\n          <select className=\"second-select\" onChange={handleOnChangeSecondSelect}>\n            {Object.keys(rates).sort().sort(function(x,y) {\n            return x === 'USD' ? -1 : y === 'USD' ? 1 : 0;\n          }).map(function (item) {\n              return <option key={Object.keys(rates).indexOf(item)}>{item}</option>\n            })}\n          </select>\n          <span className=\"arrow-down\"><svg focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M7 10l5 5 5-5z\"></path></svg></span>\n        </div>\n      </div>\n    </div>\n    <a className=\"provided\" href=\"//exchangeratesapi.io\">Currency data provided by exchangeratesapi.io</a>\n  </div>\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}